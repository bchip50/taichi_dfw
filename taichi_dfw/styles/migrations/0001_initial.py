# Generated by Django 3.2.11 on 2022-01-27 02:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import model_utils.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('resources', '0001_initial'),
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('room', models.TextField(blank=True, verbose_name='Directions to meeting room or virtual link')),
                ('day', models.DateField(blank=True, verbose_name='Date of last meeting')),
                ('start', models.TimeField(blank=True, verbose_name='Start time of the meeting')),
                ('length', models.IntegerField(blank=True, verbose_name='Minutes that the meeting lasts')),
                ('message', models.TextField(default='', verbose_name='Notes to be included in email / text reminders')),
            ],
            options={
                'verbose_name': 'meeting',
                'verbose_name_plural': 'meetings',
                'ordering': ['-day'],
                'get_latest_by': 'day',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Short title for each TaiChi Series', max_length=90, unique=True, verbose_name='Title for TaiChi Series')),
                ('slug', models.SlugField(default='Auto-generated', unique=True, verbose_name='Series address')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('visibility', models.CharField(choices=[('public', 'Show to public'), ('private', 'Do not show to public')], default='private', help_text='Control whether guests can see this series.', max_length=8)),
                ('membership', models.CharField(choices=[('open', 'Open to all'), ('invite', 'Leader must approve request to join'), ('closed', 'Leader must add members')], default='closed', help_text='Control how members are added to this series.', max_length=8)),
                ('take_roll', models.BooleanField(default=False, verbose_name='Allow leader to take roll')),
            ],
            options={
                'verbose_name': 'series',
                'verbose_name_plural': 'series',
                'ordering': ['-visibility'],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Short title for each TaiChi Style', max_length=90, unique=True, verbose_name='Title for TaiChi Style')),
                ('slug', models.SlugField(default='Auto-generated', unique=True, verbose_name='Style address')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('wikipedia', models.URLField(blank=True, verbose_name='Reference page.')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'style',
                'verbose_name_plural': 'styles',
                'ordering': ['title'],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StyleResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resourceStyle', to='resources.resource')),
                ('style', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='styleResource', to='styles.style')),
            ],
            options={
                'verbose_name': 'style_resource',
                'verbose_name_plural': 'style_resources',
            },
        ),
        migrations.CreateModel(
            name='SeriesResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resourceSeries', to='resources.resource')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seriesResource', to='styles.series')),
            ],
            options={
                'verbose_name': 'series_resource',
                'verbose_name_plural': 'series_resources',
            },
        ),
        migrations.AddField(
            model_name='series',
            name='style',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seriesStyle', to='styles.style'),
        ),
        migrations.AddField(
            model_name='series',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text="Enter single word or 'quoted strings' to be used to find your series.", through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags to be searched to find your series'),
        ),
        migrations.CreateModel(
            name='Members',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leader', models.BooleanField(default=False)),
                ('primary', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('since', models.DateField(auto_now_add=True)),
                ('last_meeting', models.DateField(blank=True, null=True, verbose_name='Last meeting attended')),
                ('paid_through', models.DateField(blank=True, null=True, verbose_name='Paid up through')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membersSeries', to=settings.AUTH_USER_MODEL)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seriesMembers', to='styles.series')),
            ],
            options={
                'verbose_name': 'member',
                'verbose_name_plural': 'members',
                'ordering': ['primary'],
            },
        ),
        migrations.CreateModel(
            name='MeetingAttendees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('present', models.BooleanField(default=True)),
                ('notes', models.TextField(default='', verbose_name='Notes from the meeting - optional')),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetingAttendance', to='styles.members')),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetingRoll', to='styles.meeting')),
            ],
            options={
                'verbose_name': 'attendee',
                'verbose_name_plural': 'attendees',
            },
        ),
        migrations.AddField(
            model_name='meeting',
            name='leader',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meetingLeader', to='styles.members'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='location',
            field=models.ForeignKey(help_text='Building where the meeting is held. Leave empty for virtual meetings.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meetingLocation', to='locations.location'),
        ),
        migrations.AddField(
            model_name='meeting',
            name='series',
            field=models.ForeignKey(help_text='Series master for this meeting.', on_delete=django.db.models.deletion.CASCADE, related_name='seriesMeetings', to='styles.series'),
        ),
        migrations.AddConstraint(
            model_name='styleresource',
            constraint=models.UniqueConstraint(fields=('style', 'resource'), name='unique style+resource'),
        ),
        migrations.AddConstraint(
            model_name='seriesresource',
            constraint=models.UniqueConstraint(fields=('series', 'resource'), name='unique series+resource'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['style', 'title'], name='styles_seri_style_i_1bb978_idx'),
        ),
        migrations.AddConstraint(
            model_name='members',
            constraint=models.UniqueConstraint(fields=('series', 'member'), name='unique series+member'),
        ),
        migrations.AddConstraint(
            model_name='meetingattendees',
            constraint=models.UniqueConstraint(fields=('attendee', 'meeting'), name='unique meeting attendee'),
        ),
    ]
